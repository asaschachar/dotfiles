"-------------------------------------------------------------------------------
" Tabs & Formatting
"-------------------------------------------------------------------------------
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set rnu
set nobackup
set nowritebackup
set noswapfile
set mouse=a

" List chars
set listchars=""          " Reset the listchars
set listchars=tab:\ \     " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.    " show trailing spaces as dots
set listchars+=extends:>  " The character to show in the last column when wrap is
                          " off and the line continues beyond the right of the screen
set listchars+=precedes:< " The character to show in the last column when wrap is
                          " off and the line continues beyond the right of the screen

" Disable folding
set nofoldenable

" Automatically read
set autoread

" Highlight 81st column
set textwidth=80
set colorcolumn=+1

" FileType specific
"" Java
autocmd FileType java setlocal expandtab

"" Clojure
augroup ft_clojure
  "" testing
  au FileType clojure setlocal lispwords+=describe,it,testing,facts,fact,provided
  "" jdbc
  au FileType clojure setlocal lispwords+=with-connection,with-query-results,with-naming-strategy,with-quoted-identifiers,update-or-insert-values,insert-record,delete-rows,insert!
  "" core.async
  au FileType clojure setlocal lispwords+=go-loop
  "" carmine (redis)
  au FileType clojure setlocal lispwords+=wcar
  "" ClojureScript
  au FileType clojure setlocal lispwords+=this-as

  " Indent top-level form.
  au FileType clojure nmap <buffer> <localleader>= mz99[(v%='z

  "" TODO: visual bindings
  au Filetype clojure nnoremap <localleader>ee :Eval<CR>
  au Filetype clojure nnoremap <localleader>ef :%Eval<CR>
  au Filetype clojure nnoremap <localleader>er :Require<CR>
  au Filetype clojure nnoremap <localleader>eR :Require!<CR>
  au Filetype clojure nnoremap <localleader>r :call fireplace#eval("(user/reset)")<CR>
augroup END

augroup prismatic
  au FileType clojure setlocal lispwords+=fnk,defnk,for-map,letk
  au FileType clojure setlocal lispwords+=go-loop
  au FileType clojure setlocal lispwords+=this-as

  let g:clojure_align_subforms = 1
  let g:clojure_align_multiline_strings = 1
  let g:clojure_special_indent_words = 'deftype,defrecord,defprotocol,reify,proxy,extend-type,extend-protocol,letfn,implement,specify,specify!,' .
        \ 'defcomponent,defcomponentk,defcomponentmethod,defmixin'

  autocmd BufNewFile,BufReadPost *.cljx setfiletype clojure
augroup END

"if filereadable($HOME.'/prismatic/config/vim/prismatic.vim')
"  source $HOME/prismatic/config/vim/prismatic.vim
"endif

"" cljx
""au BufNewFile,BufReadPost *.cljx setfiletype clojure

"" EDN
au BufRead,BufNewFile *.edn setfiletype clojure

"" Twig
au BufRead,BufNewFile *.twig so ~/.vim/bundle/vim-twig/syntax/twig.vim

"-------------------------------------------------------------------------------
" Colors
"-------------------------------------------------------------------------------
" Clear color on vim-gitgutter gutter
au VimEnter * highlight clear SignColumn

"-------------------------------------------------------------------------------
" Abbreviations
"-------------------------------------------------------------------------------
iabbrev ldis ಠ_ಠ
iabbrev lsad ಥ_ಥ
iabbrev lhap ಥ‿ಥ
iabbrev lmis ಠ‿ಠ

"-------------------------------------------------------------------------------
" Mappings
"-------------------------------------------------------------------------------
" Leaders
let mapleader = "\\"
let maplocalleader = ","

" Disable Ex mode
map Q <Nop>

noremap <Leader>dt :tabnew<Enter><Leader>d

" Last tab binding
let g:lasttab = 1
nmap <c-w>; :exe "tabn ".g:lasttab<cr>
au TabLeave * let g:lasttab = tabpagenr()

" Safely alias :we to :w
cnoreabbrev <expr> we ((getcmdtype() is# ':' && getcmdline() is# 'w')?('we'):('w'))

" Don't move on *
nnoremap * *<c-o>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Tab close
nnoremap <Leader>C :tabc<CR>

"-------------------------------------------------------------------------------
" Plugin Settings
"-------------------------------------------------------------------------------
" Disable neo* plugins
UnBundle 'Shougo/neocomplcache'
UnBundle 'Shougo/neosnippet'
UnBundle 'mbbill/undotree'
UnBundle 'arnaud-lb/vim-php-namespace'
UnBundle 'spf13/PIV'
UnBundle 'spf13/vim-autoclose'
UnBundle 'myusuf3/numbers.vim'

" kein/rainbow_parens.vim
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
"  Parentheses colours using Solarized"
let g:rbpt_colorpairs = [
  \ [ '13', '#6c71c4'],
  \ [ '5',  '#d33682'],
  \ [ '1',  '#dc322f'],
  \ [ '9',  '#cb4b16'],
  \ [ '3',  '#b58900'],
  \ [ '2',  '#859900'],
  \ [ '6',  '#2aa198'],
  \ [ '4',  '#268bd2'],
  \ ]

" jslint
let $JS_CMD='node'

" Powerline symbols: ⮂ ⮃ ⮀ ⮁ ⭤
" Powerline symbols:  ±  ➦ ✘ ⚡ ⚙       
let g:Powerline_symbols='fancy'
let g:airline_theme = 'powerlineish'
let g:airline_enable_branch = 1
let g:airline_enable_syntastic = 1

" vim-powerline symbols
"let g:airline_left_sep = '⮀'
"let g:airline_left_alt_sep = '⮁'
"let g:airline_right_sep = '⮂'
"let g:airline_right_alt_sep = '⮃'
"let g:airline_branch_prefix = '⭠'
"let g:airline_readonly_symbol = '⭤'
"let g:airline_linecolumn_prefix = '⭡'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_branch_prefix = ''
let g:airline_readonly_symbol = ''
let g:airline_linecolumn_prefix = ''

" Syntastic
let g:syntastic_auto_loc_list = 1
let g:syntastic_javascript_jsl_conf = "-conf ~/.jslconf"
let g:syntastic_mode_map = {
    \ 'mode': 'active',
    \ 'active_filetypes': [],
    \ 'passive_filetypes': ['sass', 'scss', 'html']
  \}

" CtrlP
let g:ctrlp_switch_buffer = 0
let g:ctrlp_user_command = {
    \ 'types': {
      \ 1: ['.git', 'cd %s && git ls-files'],
      \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
    \ 'fallback': 'find %s -type f'
  \ }

 let g:ctrlp_custom_ignore = {
       \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$',
       \ 'dir': '\.git$\|\.hg$\|\.svn$\|\.repl'
       \ }

" Ack
nnoremap <leader>a :Ack!<space>
let g:ackprg = 'ag --nogroup --nocolor --column'

" Tagbar
"" Move focus to tagbar when it opens to make it usable for windows on right side
let g:tagbar_autofocus = 1

" Tabularize
nmap <Leader>a- :Tabularize /=><CR>
vmap <Leader>a- :Tabularize /=><CR>

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 0

" spf13-vim
let g:spf13_no_neosnippet_expand = 1

" vim-gitgutter
let g:gitgutter_eager = 0

"-------------------------------------------------------------------------------
" General Settings & Modifications
"-------------------------------------------------------------------------------
" Disable session dialog
let g:session_autosave='no'

" Enable filetype plugin
filetype plugin on

" Tabline modifications
if has('gui')
  set guioptions-=e
endif
if exists("+showtabline")
  function! MyTabLine()
    let s = ''
    let t = tabpagenr()
    let i = 1
    while i <= tabpagenr('$')
      let buflist = tabpagebuflist(i)
      let winnr = tabpagewinnr(i)
      let s .= '%' . i . 'T'
      let s .= (i == t ? '%1*' : '%2*')
      let s .= ' '
      let s .= i . ':'
      let s .= winnr . '/' . tabpagewinnr(i,'$')
      let s .= ' %*'
      let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
      let bufnr = buflist[winnr - 1]
      let file = bufname(bufnr)
      let buftype = getbufvar(bufnr, 'buftype')
      if buftype == 'nofile'
        if file =~ '\/.'
          let file = substitute(file, '.*\/\ze.', '', '')
        endif
      else
        let file = fnamemodify(file, ':p:t')
      endif
      if file == ''
        let file = '[No Name]'
      endif
      let s .= file
      let i = i + 1
    endwhile
    let s .= '%T%#TabLineFill#%='
    let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
    return s
  endfunction
  set stal=2
  set tabline=%!MyTabLine()
endif
